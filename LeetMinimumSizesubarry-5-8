Leetcode Link: https://leetcode.com/problems/minimum-size-subarray-sum/submissions/
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        
        int j=Integer.MAX_VALUE;
        int sum=0;
        int len=Integer.MAX_VALUE;
        int l=0;
        for(int i=0;i<nums.length;i++)
        {
            sum+=nums[i];
            while(sum>=target)
            {
                len=Math.min(len,i-l+1);
                sum=sum-nums[l];
                l++;
            }
        }
        if(len==Integer.MAX_VALUE) return 0;
        return len;
    }
}
----------------------------------------------------------------------------------------------------------------------
OUTPUT:
Accepted
Runtime: 0 ms
Your input
7
[2,3,1,2,4,3]
Output
2
Expected
2
-------------------------------------------------------------------------------------------------------------------------------------------------
  //Another solution for this problem      
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int max=0,sum=0,k,c=0;
        int j=Integer.MAX_VALUE;
        for(int i=0;i<nums.length;i++)
        {   
            if(nums[i]>=target)
                return 1;
            max+=nums[i];
        
            if(max>=target&&j>i+1)
             j=i+1;
            k=i;
             do
                { 
                sum+=nums[k];
                    k--;
                    
                }while(sum<target&&k>=0);
            if(sum>=target&&j>i-k)
            {
                j=i-k;
            }
            sum=0;
        }
        if(j==Integer.MAX_VALUE)
            return 0;
        return j;
    }
}
---------------------------------------------------------------------------------------------------------------------------------
OUTPUT:
Accepted
Runtime: 0 ms
Your input
7
[2,3,1,2,4,3]
Output
2
Expected
2
