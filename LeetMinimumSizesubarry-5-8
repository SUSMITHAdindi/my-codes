Leetcode Link: https://leetcode.com/problems/minimum-size-subarray-sum/submissions/
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        
        int j=Integer.MAX_VALUE;
        int sum=0;
        int len=Integer.MAX_VALUE;
        int l=0;
        for(int i=0;i<nums.length;i++)
        {
            sum+=nums[i];
            while(sum>=target)
            {
                len=Math.min(len,i-l+1);
                sum=sum-nums[l];
                l++;
            }
        }
        if(len==Integer.MAX_VALUE) return 0;
        return len;
    }
}
----------------------------------------------------------------------------------------------------------------------
OUTPUT:
Accepted
Runtime: 0 ms
Your input
7
[2,3,1,2,4,3]
Output
2
Expected
2
-------------------------------------------------------------------------------------------------------------------------------------------------
  //Another solution for this problem      
class Solution
{
  public int minSubArrayLen (int target, int[]nums)
  {

    int j = Integer.MAX_VALUE;
    int sum = 0;
      ArrayList < Integer > l = new ArrayList < Integer > ();
      ArrayList < Integer > a = new ArrayList < Integer > ();

    for (int i = 0; i < nums.length; i++)
      {
	for (int x = i; x < nums.length; x++)
	  {
	    for (int k = i; k <= x; k++)
	      {
		sum += nums[k];
		l.add (nums[k]);
	      }

	    if (sum >= target)
	      {

		j = l.size ();
		a.add (j);
	      }
	    sum = 0;
	    l.clear ();
	  }
      }
    if (j == Integer.MAX_VALUE)
      return 0;
    else
      {
	Collections.sort (a);
	return a.get (0);
      }

  }
}
---------------------------------------------------------------------------------------------------------------------------------
OUTPUT:
Accepted
Runtime: 0 ms
Your input
7
[2,3,1,2,4,3]
Output
2
Expected
2
